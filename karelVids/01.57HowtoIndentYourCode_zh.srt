1
00:00:00,065 --> 00:00:05,890
你好。在這個視頻中，我要告訴你如何正確地縮進代碼。

2
00:00:05,890 --> 00:00:10,232
所以在這裡，呃，我們有一個卡雷爾程序，做一些特別的東西

3
00:00:10,232 --> 00:00:15,740
什麼情況是卡雷爾開始，呃，在世界上的左下角，面向東

4
00:00:15,740 --> 00:00:20,454
並在第一條街移動，移過的第一行，

5
00:00:20,454 --> 00:00:25,877
每次卡雷爾打一堆網球的，他拿起所有的人都起來，然後做了舞蹈。

6
00:00:25,877 --> 00:00:35,495
他旋轉，他向左轉，呃，四次。所以我會運行這個程序，並告訴你它做什麼。

7
00:00:35,495 --> 00:00:43,262
所以卡雷爾被拿起的球然後打轉。

8
00:00:43,262 --> 00:00:48,461
所以，現在如果我們看一看代碼在左邊，呃，這個代碼解決了這個問題。

9
00:00:48,461 --> 00:00:51,689
但是，如果你看看它，它是很難讀，

10
00:00:51,689 --> 00:00:56,335
很難理解，那是因為我們沒有正確縮進的代碼。

11
00:00:56,335 --> 00:00:59,907
因此，我們縮進代碼的原因之一是要表明結構，

12
00:00:59,907 --> 00:01:04,308
顯示不同，嗯，命令如何相互關聯的。

13
00:01:04,308 --> 00:01:12,685
所以，第一件事情是，我們有我們的啟動功能，而這些，嗯

14
00:01:12,685 --> 00:01:16,371
這很難，即使匹配，因為縮進的我們的我們的大括號，

15
00:01:16,371 --> 00:01:20,909
但是我們有我們啟動功能，嗯，這些都是大括號的啟動功能。

16
00:01:20,909 --> 00:01:28,334
而規則是所有函數內的代碼應縮進，呃，縮進該功能。

17
00:01:28,334 --> 00:01:36,528
所以，我，恩，縮進一切。我們只使用一點點捷徑。

18
00:01:36,528 --> 00:01:40,616
所以，現在我們可以看到，所有這些代碼就是這個函數裡面

19
00:01:40,616 --> 00:01:42,940
而這個規則同樣適用於while循環。

20
00:01:42,940 --> 00:01:47,873
所以這一點，這是相匹配的開始和下托架此第一while循環中，

21
00:01:47,873 --> 00:01:53,371
因此所有的代碼是在while循環中應縮進。好嗎？

22
00:01:53,371 --> 00:01:55,689
這也適用於if語句：

23
00:01:55,689 --> 00:02:00,377
一個if語句的代碼去從左大括號的右大括號。

24
00:02:00,377 --> 00:02:03,925
因此，所有在if語句的代碼應縮進。

25
00:02:03,925 --> 00:02:08,619
然後這又適用於while循環的if語句裡面的for循環。

26
00:02:08,619 --> 00:02:11,283
所以現在這段代碼開始變得多一點的結構，

27
00:02:11,283 --> 00:02:14,664
同樣我要正確地縮進到這裡。

28
00:02:14,664 --> 00:02:18,150
因此，所有的if語句中的代碼被縮進，

29
00:02:18,150 --> 00:02:22,041
至於裡面的while循環和裡面的代碼for循環。

30
00:02:22,041 --> 00:02:24,992
所以這一點，現在，是怎樣的代碼應縮進。

31
00:02:24,992 --> 00:02:30,912
嗯，這是不是很大呢。實際上，我們將要分解的代碼更好一點。

32
00:02:30,912 --> 00:02:36,557
嗯。例如，有一件事我可以做的就是寫一個函數，呵

33
00:02:36,557 --> 00:02:43,031
所謂的“舞蹈” ，這將是排序的旋轉卡雷爾四倍左右的代碼，

34
00:02:43,031 --> 00:02:45,696
我會正確縮進的代碼。

35
00:02:45,696 --> 00:02:54,398
而現在，在這裡我想這樣做，我只是叫“舞蹈”。我會打電話的是，在這裡，也是如此。

36
00:02:54,398 --> 00:03:04,136
因此，如果我們重置並執行這一點，我們把它做同樣的事情，但是這個代碼是多少，呃清晰。

37
00:03:04,136 --> 00:03:07,000
結構更加清晰。
1
00:00:00,162 --> 00:00:07,934
你好。在這段視頻中，我們將要介紹的自頂向下的設計和分解卡雷爾的想法。

2
00:00:07,934 --> 00:00:11,790
所以，我們推出功能最近和提醒：

3
00:00:11,790 --> 00:00:19,164
我們使用的功能有幾個重要原因：第一，我們的程序分解成更小的部分，

4
00:00:19,164 --> 00:00:22,177
第二：避免重複的代碼，

5
00:00:22,177 --> 00:00:26,168
第三：讓我們的程序更加易讀。

6
00:00:26,168 --> 00:00:29,431
我們要解釋一下頂向下的設計和計劃分解

7
00:00:29,431 --> 00:00:33,872
以及我們如何使用函數來解決這些問題。

8
00:00:33,872 --> 00:00:37,441
那麼，什麼是自頂向下的設計，什麼是分解？

9
00:00:37,441 --> 00:00:38,877
那麼讓我們來考慮一下這種方式：

10
00:00:38,877 --> 00:00:44,124
比方說，你有你不​​知道如何解決一些真正的大問題出發的。

11
00:00:44,124 --> 00:00:48,769
那麼，你要做的第一件事就是你把它分解成幾個較小的問題。

12
00:00:48,769 --> 00:00:52,123
而現在這些問題比大問題稍微容易一些，

13
00:00:52,123 --> 00:00:55,876
然後從這些小問題，你把它分解成更小的問題

14
00:00:55,876 --> 00:00:57,955
和你繼續做這一個地步，

15
00:00:57,955 --> 00:01:02,125
問題是如此之小，因此容易解決，你可以隨便去做到這一點。

16
00:01:02,125 --> 00:01:04,170
因此，讓我們來看看另一個例子。

17
00:01:04,170 --> 00:01:06,047
比方說，你要拍一部電影。

18
00:01:06,047 --> 00:01:13,876
好了，拍電影的問題是非常大的，但你可以打破成幾個步驟。

19
00:01:13,876 --> 00:01:15,101
你需要編寫腳本。

20
00:01:15,101 --> 00:01:17,049
你需要聘請演員和工作人員。

21
00:01:17,049 --> 00:01:18,388
您需要拍攝的電影。

22
00:01:18,388 --> 00:01:19,877
你需要去編輯影片。

23
00:01:19,877 --> 00:01:22,494
但這些本身是每個大的問題，

24
00:01:22,494 --> 00:01:25,131
和拍攝電影，我們可以分解成問題：

25
00:01:25,131 --> 00:01:29,297
拍攝場景之一，而拍攝場景二，攝製場景三，

26
00:01:29,297 --> 00:01:30,845
所以我們先從一個大問題

27
00:01:30,845 --> 00:01:37,045
而我們問題分解為更小的問題，這些問題更容易解決。

28
00:01:37,045 --> 00:01:41,268
這個想法，這是自頂向下設計的原因，是“事業是從上而下將

29
00:01:41,268 --> 00:01:42,744
而不是從底部向上。

30
00:01:42,744 --> 00:01:48,000
我們開始與大的問題，然後將它分解成更小的問題。

31
00:01:48,000 --> 00:01:53,812
所以，在這個視頻就是我們將要做的是我們要去解決跨欄叫卡雷爾的問題。

32
00:01:53,812 --> 00:01:58,628
所以卡雷爾開始，在此之上的世界，一路在左邊，面朝東方，

33
00:01:58,628 --> 00:02:01,962
並有一系列在他面前兩關，

34
00:02:01,962 --> 00:02:07,407
我們需要移動，跳過這些障礙，然後完成比賽。

35
00:02:07,407 --> 00:02:09,748
因此，讓我們進入我們的代碼編輯器，編寫這個程序。

36
00:02:09,748 --> 00:02:14,200
好了，我們將開始我們的啟動功能，

37
00:02:14,200 --> 00:02:19,104
而我們在做什麼，因為我們要做，使用自頂向下的設計來解決這個問題，

38
00:02:19,104 --> 00:02:24,236
是我們寫，我們需要公正解決這個問題的功能。

39
00:02:24,236 --> 00:02:29,049
所以我們想要做的第一件事是，我們將要運行的障礙。

40
00:02:29,049 --> 00:02:34,713
現在，卡雷爾不知道如何目前運行的障礙，但我們會定義一個函數。

41
00:02:34,713 --> 00:02:41,003
因此，首先，我們需要運行的障礙，然後我們將躍過障礙。

42
00:02:41,003 --> 00:02:47,007
然後，我們需要做的是什麼，我們需要運行到下一個關卡，

43
00:02:47,007 --> 00:02:52,927
然後我們將跳過這一關，然後我們將運行到終點。

44
00:02:52,973 --> 00:02:56,588
所以我們啟動功能，倒像是一個故事。

45
00:02:56,588 --> 00:03:01,786
該函數名是清楚，所以它顯示了我們想做的事情。

46
00:03:01,786 --> 00:03:04,380
所以接下來，我們只需要編寫這些功能。

47
00:03:04,380 --> 00:03:10,517
因此，讓我們去： “功能運行要關”

48
00:03:10,517 --> 00:03:16,624
好了，運行的障礙，我們需要做的是，我們需要移動三次。

49
00:03:16,624 --> 00:03:17,606
所以，如果我運行這個...

50
00:03:17,606 --> 00:03:21,380
哎呀。該程序將無法運行，因為我們沒有所有的功能定義。

51
00:03:21,380 --> 00:03:28,218
因此，我會在這裡做的是我會註釋掉，我會說， “讓我們忽略了其中的一些功能暫時。 ”

52
00:03:28,218 --> 00:03:29,429
因此，我們將運行到這一關。

53
00:03:29,429 --> 00:03:30,403
太棒了！

54
00:03:30,403 --> 00:03:34,713
現在，我們需要做的在這一點上，接下來的事情就是我們需要告訴卡雷爾，

55
00:03:34,713 --> 00:03:37,212
我們還要教卡雷爾如何跨欄。

56
00:03:37,212 --> 00:03:39,581
所以我們說： “功能跨欄跳”

57
00:03:39,581 --> 00:03:43,898
我們想在這裡做什麼，好了，我們想左轉，

58
00:03:43,898 --> 00:03:46,940
然後我們想搬家，

59
00:03:46,956 --> 00:03:50,396
然後，嗯，我們想右轉，

60
00:03:50,396 --> 00:03:53,394
但我們要教卡雷爾如何右轉。

61
00:03:53,394 --> 00:03:57,003
所以我們會說： “功能右轉”

62
00:03:57,003 --> 00:03:57,706
嗯，這是...

63
00:03:57,706 --> 00:04:02,377
右轉是“向左轉 ”三次。

64
00:04:02,377 --> 00:04:06,377
因此，讓我們看到這個留給我們。

65
00:04:06,377 --> 00:04:11,702
糟糕！我們要記得帶回來的“跳障礙。 ”

66
00:04:11,702 --> 00:04:18,532
好吧。因此，我們向右轉，現在我們需要移動，然後再右轉。

67
00:04:18,532 --> 00:04:21,983
順其自然，留下我們...

68
00:04:21,998 --> 00:04:29,122
好吧。然後我們再動了，然後我們就向左轉。

69
00:04:29,122 --> 00:04:34,121
大。所以，現在我們已經教卡雷爾如何運行的障礙，然後教卡雷爾如何跨欄。

70
00:04:34,121 --> 00:04:39,895
而現在，我們可以繼續使用這些功能來避免重複的代碼。

71
00:04:39,895 --> 00:04:43,335
我們不得不跑跨欄的這個問題，它是相同的前兩個障礙。

72
00:04:43,335 --> 00:04:46,729
我們有跳躍障礙的問題，它是相同的每個關卡。

73
00:04:46,729 --> 00:04:49,663
因此，我們使用一個函數來解決這個問題。

74
00:04:49,663 --> 00:04:56,053
所以我會帶來這兩條線，現在我們看到卡雷爾運行的障礙，然後我們幾乎已經完成，

75
00:04:56,053 --> 00:04:56,736
跳兩關...

76
00:04:56,736 --> 00:04:58,190
我們只需要運行來完成。

77
00:04:58,190 --> 00:05:08,424
所以我們說： “功能運行完成”，並要做到這一點，我們說“動”的四倍。

78
00:05:08,424 --> 00:05:12,057
讓我們來運行。

79
00:05:12,057 --> 00:05:13,444
而且，我們有它。

80
00:05:13,444 --> 00:05:19,115
我們通過採用自頂向下的設計打破它解決了一個棘手的問題。

81
00:05:19,115 --> 00:05:24,127
我們分解這個問題分成更小的部分是比較容易解決的問題，

82
00:05:24,127 --> 00:05:28,127
然後寫函數來教卡雷爾如何執行這些新的東西。
